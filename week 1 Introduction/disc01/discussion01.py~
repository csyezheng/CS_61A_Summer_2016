# 1.3 Questions

# 1. Alfonso will only wear a jacket outside if it is below 60 degrees or it is raining. Fill 
#    in the function wears jacket which takes in the current temperature and a Boolean
#    value telling if it is raining and returns True if Alfonso will wear a jacket and False
#    otherwise.

def wears_jacket(temp, raining):
    """
    >>> rain = False
    >>> wears_jacket(90, rain)
    False
    >>> wears_jacket(40, rain)
    True
    >>> wears_jacket(100, True)
    True
    """
    return raining or (temp < 60)


# 2. To handle discussion section overflow, TAs may direct students to a more empty section
#    that is happening at the same time. Write the function handle overflow, which
#    takes in the number of students at two sections and prints out what to do if either section
#    exceeds 30 students. See the doctests below for the behavior.

def handle_overflow(s1, s2):
    """
    >>> handle_overflow(27, 15)
    No overflow.
    >>> handle_overflow(35, 29)
    1 spot left in Section 2.
    >>> handle_overflow(20, 32)
    10 spots left in Section 1.
    >>> handle_overflow(35, 30)
    No space left in either section.
    """
    if s1 <= 30 and s2 <= 30:
        print("No overflow.")
    elif s2 > 30 and s1 < 30:
        print(str(30 - s1) + "spots left in Section 1.")
    elif s1 > 30 and s2 < 30:
        print(str(30 - s2) + "spots left in Section 2.")
    else:
        print("No space left in either section.")


# 1.5 Questions

# 1. What is the result of evaluating the following code?

def square(x):
    return x * x
def so_slow(num):
    x = num
    while x > 0:
        x = x + 1
    return x / 0
square(so_slow(5))      # Error


# 2. Fill in the is prime function, which returns True if n is a prime number and False
#    otherwise. After you have a working solution, think about potential ways to make
#    your solution more efficient.
#    Hint: use the % operator: x % y returns the remainder of x when divided by y.
def is_prime(n):
    """ To test the parameter is prime or not
    
    >>> is_prime(1)
    >>> False
    >>> is_prime(2)
    >>> True
    """
    def square(x):
        return x * x
    assert type(n) == int, 'not an integer'
    assert n > 0, 'this number should greater than 0'
    if n == 1:
        return True
    curr = 2
    while curr < n:
        temp = square(curr)
        if temp == n:
            return False
        elif temp > n:
            return True
        curr += 1


    
